{
  "README.html": {
    "href": "README.html",
    "title": "| SECODash Backend",
    "keywords": "back-end documentation TODO"
  },
  "api/Backend.IntegrationTests.BackendWebApplicationFactory-1.html": {
    "href": "api/Backend.IntegrationTests.BackendWebApplicationFactory-1.html",
    "title": "Class BackendWebApplicationFactory<TProgram> | SECODash Backend",
    "keywords": "Class BackendWebApplicationFactory<TProgram> Namespace Backend.IntegrationTests Assembly Backend.IntegrationTests.dll This method is used to create a WebApplicationFactory for the integration tests. public class BackendWebApplicationFactory<TProgram> : WebApplicationFactory<TProgram>, IDisposable, IAsyncDisposable where TProgram : class Type Parameters TProgram Inheritance object WebApplicationFactory<TProgram> BackendWebApplicationFactory<TProgram> Implements IDisposable IAsyncDisposable Inherited Members WebApplicationFactory<TProgram>.WithWebHostBuilder(Action<IWebHostBuilder>) WebApplicationFactory<TProgram>.GetTestAssemblies() WebApplicationFactory<TProgram>.CreateHostBuilder() WebApplicationFactory<TProgram>.CreateWebHostBuilder() WebApplicationFactory<TProgram>.CreateServer(IWebHostBuilder) WebApplicationFactory<TProgram>.CreateHost(IHostBuilder) WebApplicationFactory<TProgram>.CreateClient() WebApplicationFactory<TProgram>.CreateClient(WebApplicationFactoryClientOptions) WebApplicationFactory<TProgram>.CreateDefaultClient(params DelegatingHandler[]) WebApplicationFactory<TProgram>.ConfigureClient(HttpClient) WebApplicationFactory<TProgram>.CreateDefaultClient(Uri, params DelegatingHandler[]) WebApplicationFactory<TProgram>.Dispose() WebApplicationFactory<TProgram>.Dispose(bool) WebApplicationFactory<TProgram>.DisposeAsync() WebApplicationFactory<TProgram>.Server WebApplicationFactory<TProgram>.Services WebApplicationFactory<TProgram>.Factories WebApplicationFactory<TProgram>.ClientOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureWebHost(IWebHostBuilder) Gives a fixture an opportunity to configure the application before it gets built. protected override void ConfigureWebHost(IWebHostBuilder builder) Parameters builder IWebHostBuilder The IWebHostBuilder for the application."
  },
  "api/Backend.IntegrationTests.EcosystemsTest.html": {
    "href": "api/Backend.IntegrationTests.EcosystemsTest.html",
    "title": "Class EcosystemsTest | SECODash Backend",
    "keywords": "Class EcosystemsTest Namespace Backend.IntegrationTests Assembly Backend.IntegrationTests.dll Integration tests for the EcosystemsController. Uses the BackendWebApplicationFactory that replaces the standard ElasticsearchClient with one that uses a dedicated test index. See Backend.IntegrationTests/BackendWebApplicationFactory.cs for more information. public class EcosystemsTest : IClassFixture<BackendWebApplicationFactory<Program>> Inheritance object EcosystemsTest Implements IClassFixture<BackendWebApplicationFactory<Program>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EcosystemsTest(BackendWebApplicationFactory<Program>) Integration tests for the EcosystemsController. Uses the BackendWebApplicationFactory that replaces the standard ElasticsearchClient with one that uses a dedicated test index. See Backend.IntegrationTests/BackendWebApplicationFactory.cs for more information. public EcosystemsTest(BackendWebApplicationFactory<Program> factory) Parameters factory BackendWebApplicationFactory<Program> Methods Get_Ecosystems_ReturnsCorrectEcosystems() Checks whether a GET request to /ecosystems returns the correct ecosystems. [Fact] public Task Get_Ecosystems_ReturnsCorrectEcosystems() Returns Task Post_Ecosystems_ReturnsCorrectEcosystems() Checks whether a POST request to /ecosystems returns the correct EcosystemDto. [Fact] public Task Post_Ecosystems_ReturnsCorrectEcosystems() Returns Task"
  },
  "api/Backend.IntegrationTests.ProjectsTest.html": {
    "href": "api/Backend.IntegrationTests.ProjectsTest.html",
    "title": "Class ProjectsTest | SECODash Backend",
    "keywords": "Class ProjectsTest Namespace Backend.IntegrationTests Assembly Backend.IntegrationTests.dll public class ProjectsTest Inheritance object ProjectsTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Post_Projects_ReturnTopicProjects() This method tests the Post method of the ProjectsController that mines projects based on topics and keywords. [Fact] public Task Post_Projects_ReturnTopicProjects() Returns Task"
  },
  "api/Backend.IntegrationTests.html": {
    "href": "api/Backend.IntegrationTests.html",
    "title": "Namespace Backend.IntegrationTests | SECODash Backend",
    "keywords": "Namespace Backend.IntegrationTests Classes BackendWebApplicationFactory<TProgram> This method is used to create a WebApplicationFactory for the integration tests. EcosystemsTest Integration tests for the EcosystemsController. Uses the BackendWebApplicationFactory that replaces the standard ElasticsearchClient with one that uses a dedicated test index. See Backend.IntegrationTests/BackendWebApplicationFactory.cs for more information. ProjectsTest"
  },
  "api/BackendTests.ElasticsearchAnalysisServiceTests.html": {
    "href": "api/BackendTests.ElasticsearchAnalysisServiceTests.html",
    "title": "Class ElasticsearchAnalysisServiceTests | SECODash Backend",
    "keywords": "Class ElasticsearchAnalysisServiceTests Namespace BackendTests Assembly BackendTests.dll This class contains unit tests for the ElasticsearchAnalysisService. [TestFixture] public class ElasticsearchAnalysisServiceTests Inheritance object ElasticsearchAnalysisServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FilterSubEcosystems_ReturnsCorrectList() This tests the FilterSubEcosystems method of the ElasticsearchAnalysisService. It tests if the method returns the correct list of sub-ecosystems. We test this by creating a list of SubEcosystemDtos and a list of topics and passing them to the method. After that we check if the returned list contains the correct sub-ecosystems. [Test] public void FilterSubEcosystems_ReturnsCorrectList() SortAndNormalizeLanguages_ReturnsCorrectList() This tests the SortAndNormalizeLanguages method of the ElasticsearchAnalysisService. It tests if the method returns the correct list of languages. We test this by creating a list of ProgrammingLanguageDtos and passing it to the method. After that we check if the returned list contains the correct amount of languages. Secondly we check if the total percentage of the returned list is correct. Lastly we check if the returned list is ordered by descending percentage. [Test] public void SortAndNormalizeLanguages_ReturnsCorrectList() SortSubEcosystems_ReturnsCorrectList() This tests the SortSubEcosystems method of the ElasticsearchAnalysisService. It tests if the method returns the correct list of sub-ecosystems. We test this by creating a list of SubEcosystemDtos and passing them to the method. After that we check if the returned list is ordered by descending project count. [Test] public void SortSubEcosystems_ReturnsCorrectList()"
  },
  "api/BackendTests.SpiderServiceUnitTests.html": {
    "href": "api/BackendTests.SpiderServiceUnitTests.html",
    "title": "Class SpiderServiceUnitTests | SECODash Backend",
    "keywords": "Class SpiderServiceUnitTests Namespace BackendTests Assembly BackendTests.dll This class contains unit tests for the SpiderService. [TestFixture] public class SpiderServiceUnitTests Inheritance object SpiderServiceUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetProjectsByKeywordAsync_ReturnsProjects() This tests the GetProjectsByKeywordAsync method of the SpiderService. It tests if the method returns the correct amount of projects. Lastly it checks if the returned list contains projects with the given keyword. [Test] public void GetProjectsByKeywordAsync_ReturnsProjects() GetProjectsByTopicAsync_ReturnsProjects() This tests the GetProjectsByTopicAsync method of the SpiderService. It tests if the method returns the correct amount of projects. Lastly it checks if the returned list contains projects with the given topic. [Test] public void GetProjectsByTopicAsync_ReturnsProjects()"
  },
  "api/BackendTests.html": {
    "href": "api/BackendTests.html",
    "title": "Namespace BackendTests | SECODash Backend",
    "keywords": "Namespace BackendTests Classes ElasticsearchAnalysisServiceTests This class contains unit tests for the ElasticsearchAnalysisService. SpiderServiceUnitTests This class contains unit tests for the SpiderService."
  },
  "api/SECODashBackend.Controllers.EcosystemsController.html": {
    "href": "api/SECODashBackend.Controllers.EcosystemsController.html",
    "title": "Class EcosystemsController | SECODash Backend",
    "keywords": "Class EcosystemsController Namespace SECODashBackend.Controllers Assembly SECODashBackend.dll This controller is responsible for handling requests related to ecosystems. [ApiController] [Route(\"[controller]\")] public class EcosystemsController : ControllerBase Inheritance object ControllerBase EcosystemsController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EcosystemsController(ILogger<EcosystemsController>, IEcosystemsService) This controller is responsible for handling requests related to ecosystems. public EcosystemsController(ILogger<EcosystemsController> logger, IEcosystemsService ecosystemsService) Parameters logger ILogger<EcosystemsController> ecosystemsService IEcosystemsService Methods CreateEcosystem(EcosystemCreationDto) Create a new ecosystem from provided information. [HttpPost(\"CreateEcosystem\")] [SwaggerOperation(\"Create a new ecosystem\", null)] [SwaggerResponse(200, \"successfully created the ecosystem.\", null)] public Task<string> CreateEcosystem(EcosystemCreationDto dto) Parameters dto EcosystemCreationDto All information needed to create a new ecosystem Returns Task<string> GetAllAsync() Returns all top-level ecosystems. [HttpGet] [SwaggerOperation(\"Get all ecosystems\", null)] [SwaggerResponse(200, \"successful operation\", null)] public Task<ActionResult<List<EcosystemOverviewDto>>> GetAllAsync() Returns Task<ActionResult<List<EcosystemOverviewDto>>> GetTechnologyTaxonomy(string) Returns the technology taxonomy of the given ecosystem. This list was saved in the postgres database when the ecosystem was created. [HttpGet(\"taxonomy/technologies\")] public Task<ActionResult<List<string>>> GetTechnologyTaxonomy(string ecosystemName) Parameters ecosystemName string The name of the ecosystem you want to find technologies for. Returns Task<ActionResult<List<string>>> A list of technologies of the given ecosystem. RemoveEcosystem(RemoveEcosystemDto) [HttpPost(\"RemoveEcosystem\")] [SwaggerOperation(\"Remove an existing ecosystem\", null)] [SwaggerResponse(200, \"Successfully removed the ecosystem\", null)] public Task<string> RemoveEcosystem(RemoveEcosystemDto dto) Parameters dto RemoveEcosystemDto Returns Task<string> SearchByTopics(EcosystemRequestDto) Returns an ecosystem defined by the topics in the dto. [HttpPost] public Task<ActionResult<EcosystemDto>> SearchByTopics(EcosystemRequestDto dto) Parameters dto EcosystemRequestDto Returns Task<ActionResult<EcosystemDto>> UpdateDescription(DescriptionRequestDto) Update the description of a top-level ecosystem. [HttpPost(\"DescriptionUpdate\")] [SwaggerOperation(\"Updates description for root ecosystem\", null)] [SwaggerResponse(200, \"successfully updated description\", null)] public Task<ActionResult<DescriptionDto>> UpdateDescription(DescriptionRequestDto req) Parameters req DescriptionRequestDto Returns Task<ActionResult<DescriptionDto>>"
  },
  "api/SECODashBackend.Controllers.MineController.html": {
    "href": "api/SECODashBackend.Controllers.MineController.html",
    "title": "Class MineController | SECODash Backend",
    "keywords": "Class MineController Namespace SECODashBackend.Controllers Assembly SECODashBackend.dll This controller is responsible for handling requests related to mining projects. [ApiController] [Route(\"[controller]\")] public class MineController : ControllerBase Inheritance object ControllerBase MineController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MineController(ILogger<MineController>, IProjectsService, IScheduler) This controller is responsible for handling requests related to mining projects. public MineController(ILogger<MineController> logger, IProjectsService projectsService, IScheduler scheduler) Parameters logger ILogger<MineController> projectsService IProjectsService scheduler IScheduler Methods MineByKeyword(string, string, int) This method returns a list of projects based on the given keyword and amount. [HttpPost(\"search\")] public Task<ActionResult> MineByKeyword(string keyword, string ecosystem, int amount) Parameters keyword string The keyword that the projects should relate to. ecosystem string The ecosystem the request is linked to amount int The number of projects to be mined. Returns Task<ActionResult> MineByTaxonomy(List<string>, string, int, int) This method returns a list of projects based on the given taxonomy and amounts. [HttpPost(\"taxonomy\")] public Task<ActionResult> MineByTaxonomy(List<string> taxonomy, string ecosystem, int keywordAmount, int topicAmount) Parameters taxonomy List<string> The list of strings to mine off of github ecosystem string The ecosystem the request is linked to keywordAmount int The amount of repos to search for with keyword search topicAmount int The amount of repos to search for with topic search Returns Task<ActionResult> MineByTopic(string, string, int) This method returns a list of projects based on the given topic and amount. [HttpPost(\"topic\")] public Task<ActionResult> MineByTopic(string topic, string ecosystem, int amount) Parameters topic string The topic that the projects should relate to. ecosystem string The ecosystem the request is linked to amount int The number of projects to be mined Returns Task<ActionResult> ScheduleMineByKeyword(string, string, int, MiningFrequency) This method schedules a recurring job that mines projects based on the given keyword, amount and frequency. [HttpGet(\"schedule/keyword\")] public IActionResult ScheduleMineByKeyword(string keyword, string ecosystem, int amount, MiningFrequency miningFrequency) Parameters keyword string The keyword to mine by. ecosystem string The ecosystem the request is linked to amount int The amount of projects to mine. miningFrequency MiningFrequency The frequency of mining. Returns IActionResult ScheduleMineByTaxonomy(string, List<string>, int, int, MiningFrequency) This method schedules a recurring job that mines projects based on the given taxonomy. [HttpPost(\"schedule/taxonomy\")] public IActionResult ScheduleMineByTaxonomy(string ecosystem, List<string> taxonomy, int keywordAmount, int topicAmount, MiningFrequency miningFrequency) Parameters ecosystem string The name of the ecosystem. taxonomy List<string> The taxonomy to mine by. keywordAmount int The amount of projects to mine for each term using keyword search. topicAmount int The amount of projects to mine for each term using topic search. miningFrequency MiningFrequency The frequency of mining. Returns IActionResult ScheduleMineByTopic(string, int, string, MiningFrequency) This method schedules a recurring job that mines projects based on the given topic, amount and frequency. [HttpGet(\"schedule/topic\")] public IActionResult ScheduleMineByTopic(string topic, int amount, string ecosystem, MiningFrequency miningFrequency) Parameters topic string The topic to mine by. amount int The amount of projects to mine. ecosystem string The ecosystem the request is linked to miningFrequency MiningFrequency The frequency of mining. Returns IActionResult UnscheduleMineByKeyword(string) This method deletes a recurring job that mines projects based on the given keyword if the jobs exists. [HttpGet(\"unschedule/keyword\")] public IActionResult UnscheduleMineByKeyword(string keyword) Parameters keyword string The keyword to mine by. Returns IActionResult UnscheduleMineByTaxonomy(string) This method deletes a recurring job that mines projects based on the given taxonomy if the job exists. [HttpGet(\"unschedule/taxonomy\")] public IActionResult UnscheduleMineByTaxonomy(string ecosystem) Parameters ecosystem string The name of the ecosystem. Returns IActionResult UnscheduleMineByTopic(string) This method deletes a recurring job that mines projects based on the given topic if the jobs exists. [HttpGet(\"unschedule/topic\")] public IActionResult UnscheduleMineByTopic(string topic) Parameters topic string The topic to mine by. Returns IActionResult"
  },
  "api/SECODashBackend.Controllers.UsersController.html": {
    "href": "api/SECODashBackend.Controllers.UsersController.html",
    "title": "Class UsersController | SECODash Backend",
    "keywords": "Class UsersController Namespace SECODashBackend.Controllers Assembly SECODashBackend.dll This controller is responsible for handling requests related to users. [ApiController] [Route(\"[controller]\")] public class UsersController : ControllerBase Inheritance object ControllerBase UsersController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UsersController(ILogger<UsersController>, UsersService) This controller is responsible for handling requests related to users. public UsersController(ILogger<UsersController> logger, UsersService usersService) Parameters logger ILogger<UsersController> usersService UsersService Methods AddUserAsync(string, string) Add a User to the database. [HttpPost(\"AddUser\")] public Task AddUserAsync(string id, string userName) Parameters id string userName string Returns Task GetAllAsync() Return all Users saved in the database. [HttpGet(\"GetAll\")] public Task<List<User>> GetAllAsync() Returns Task<List<User>> GetByNameAsync(string) Get a User using the provided UserName. [HttpPost(\"GetByName\")] public Task<ActionResult<User>> GetByNameAsync(string userName) Parameters userName string Returns Task<ActionResult<User>> LoginRequest(UserTypeRequestDto) Handle a login request by checking the user database and returning the UserType. [HttpPost(\"LoginRequest\")] [SwaggerOperation(\"Return user type and ecosystems that the user can edit.\", null)] [SwaggerResponse(200, \"successful operation\", null)] public Task<ActionResult<UserPermissionsDto>> LoginRequest(UserTypeRequestDto req) Parameters req UserTypeRequestDto Returns Task<ActionResult<UserPermissionsDto>> PermitEditor(string, string, string) Handle the request to give an 'Admin' editorial rights of an ecosystem. [HttpPost(\"PermitEditor\")] [SwaggerOperation(\"Give Admin permission to edit a top-level ecosystem\", null)] [SwaggerResponse(200, \"successful operation\", null)] public Task<string> PermitEditor(string rootAdminId, string userName, string topEcosystem) Parameters rootAdminId string userName string topEcosystem string Returns Task<string> RemoveUser(string) Remove a User by by provided Id. [HttpPost(\"RemoveUser\")] public Task RemoveUser(string id) Parameters id string Returns Task UpdatePermissions(UpdatePermissionsDto) Handle the request for changing the users permissions level. [HttpPost(\"UpdatePermissions\")] [SwaggerOperation(\"Update the permission level of a User\", null)] [SwaggerResponse(200, \"successful operation\", null)] public Task<string> UpdatePermissions(UpdatePermissionsDto dto) Parameters dto UpdatePermissionsDto Returns Task<string>"
  },
  "api/SECODashBackend.Controllers.html": {
    "href": "api/SECODashBackend.Controllers.html",
    "title": "Namespace SECODashBackend.Controllers | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Controllers Classes EcosystemsController This controller is responsible for handling requests related to ecosystems. MineController This controller is responsible for handling requests related to mining projects. UsersController This controller is responsible for handling requests related to users."
  },
  "api/SECODashBackend.DataConverters.EcosystemConverter.html": {
    "href": "api/SECODashBackend.DataConverters.EcosystemConverter.html",
    "title": "Class EcosystemConverter | SECODash Backend",
    "keywords": "Class EcosystemConverter Namespace SECODashBackend.DataConverters Assembly SECODashBackend.dll Converts Ecosystems to and from data transfer objects. public static class EcosystemConverter Inheritance object EcosystemConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToDto(Ecosystem) Converts an Ecosystem to a data transfer object. public static EcosystemOverviewDto ToDto(Ecosystem ecosystem) Parameters ecosystem Ecosystem Returns EcosystemOverviewDto"
  },
  "api/SECODashBackend.DataConverters.html": {
    "href": "api/SECODashBackend.DataConverters.html",
    "title": "Namespace SECODashBackend.DataConverters | SECODash Backend",
    "keywords": "Namespace SECODashBackend.DataConverters Classes EcosystemConverter Converts Ecosystems to and from data transfer objects."
  },
  "api/SECODashBackend.Database.DbInitializer.html": {
    "href": "api/SECODashBackend.Database.DbInitializer.html",
    "title": "Class DbInitializer | SECODash Backend",
    "keywords": "Class DbInitializer Namespace SECODashBackend.Database Assembly SECODashBackend.dll Database initializer. public static class DbInitializer Inheritance object DbInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(EcosystemsContext) Initializes the Ecosystems database with the top-level ecosystems. public static void Initialize(EcosystemsContext context) Parameters context EcosystemsContext The database context."
  },
  "api/SECODashBackend.Database.EcosystemsContext.html": {
    "href": "api/SECODashBackend.Database.EcosystemsContext.html",
    "title": "Class EcosystemsContext | SECODash Backend",
    "keywords": "Class EcosystemsContext Namespace SECODashBackend.Database Assembly SECODashBackend.dll This class is used to connect to the database, and create and update the all tables. public class EcosystemsContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext EcosystemsContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EcosystemsContext(DbContextOptions<EcosystemsContext>) This class is used to connect to the database, and create and update the all tables. public EcosystemsContext(DbContextOptions<EcosystemsContext> options) Parameters options DbContextOptions<EcosystemsContext> Properties BannedTopics The BannedTopics table. public DbSet<BannedTopic> BannedTopics { get; set; } Property Value DbSet<BannedTopic> Ecosystems The Ecosystems table. public DbSet<Ecosystem> Ecosystems { get; set; } Property Value DbSet<Ecosystem> Taxonomy The Taxonomy table. public DbSet<Taxonomy> Taxonomy { get; set; } Property Value DbSet<Taxonomy> Technologies The Technologies table. public DbSet<Technology> Technologies { get; set; } Property Value DbSet<Technology> Users The Users table. public DbSet<User> Users { get; set; } Property Value DbSet<User> Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/SECODashBackend.Database.Extensions.html": {
    "href": "api/SECODashBackend.Database.Extensions.html",
    "title": "Class Extensions | SECODash Backend",
    "keywords": "Class Extensions Namespace SECODashBackend.Database Assembly SECODashBackend.dll public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateDbIfNotExists(IHost) This method checks if the Ecosystems database exists. If it does not exist, create it and fill it with initial values. public static void CreateDbIfNotExists(this IHost host) Parameters host IHost"
  },
  "api/SECODashBackend.Database.UserContext.html": {
    "href": "api/SECODashBackend.Database.UserContext.html",
    "title": "Class UserContext | SECODash Backend",
    "keywords": "Class UserContext Namespace SECODashBackend.Database Assembly SECODashBackend.dll Represents the database context for the User entity. public class UserContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext UserContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserContext(DbContextOptions<UserContext>) Represents the database context for the User entity. public UserContext(DbContextOptions<UserContext> options) Parameters options DbContextOptions<UserContext> Properties Users public DbSet<User> Users { get; set; } Property Value DbSet<User> Methods OnModelCreating(ModelBuilder) Configures the model for the context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder used to construct the model for this context."
  },
  "api/SECODashBackend.Database.UserDbInitializer.html": {
    "href": "api/SECODashBackend.Database.UserDbInitializer.html",
    "title": "Class UserDbInitializer | SECODash Backend",
    "keywords": "Class UserDbInitializer Namespace SECODashBackend.Database Assembly SECODashBackend.dll Initializes the Users database with the initial RootAdmin User. public static class UserDbInitializer Inheritance object UserDbInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Initialize(EcosystemsContext) public static void Initialize(EcosystemsContext context) Parameters context EcosystemsContext"
  },
  "api/SECODashBackend.Database.html": {
    "href": "api/SECODashBackend.Database.html",
    "title": "Namespace SECODashBackend.Database | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Database Classes DbInitializer Database initializer. EcosystemsContext This class is used to connect to the database, and create and update the all tables. Extensions UserContext Represents the database context for the User entity. UserDbInitializer Initializes the Users database with the initial RootAdmin User."
  },
  "api/SECODashBackend.Dtos.Contributors.ContributorDto.html": {
    "href": "api/SECODashBackend.Dtos.Contributors.ContributorDto.html",
    "title": "Class ContributorDto | SECODash Backend",
    "keywords": "Class ContributorDto Namespace SECODashBackend.Dtos.Contributors Assembly SECODashBackend.dll Represents a data transfer object for a Contributor of a Project. [DataContract] public class ContributorDto Inheritance object ContributorDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Contributions [DataMember(Name = \"contributions\")] public int? Contributions { get; init; } Property Value int? Id [DataMember(Name = \"id\")] public required int Id { get; init; } Property Value int Login [DataMember(Name = \"login\")] public required string Login { get; init; } Property Value string NodeId [DataMember(Name = \"nodeId\")] public string? NodeId { get; init; } Property Value string Type [DataMember(Name = \"type\")] public string? Type { get; init; } Property Value string"
  },
  "api/SECODashBackend.Dtos.Contributors.TopContributorDto.html": {
    "href": "api/SECODashBackend.Dtos.Contributors.TopContributorDto.html",
    "title": "Class TopContributorDto | SECODash Backend",
    "keywords": "Class TopContributorDto Namespace SECODashBackend.Dtos.Contributors Assembly SECODashBackend.dll Represents a data transfer object for a Top Contributor of an ecosystem. public class TopContributorDto Inheritance object TopContributorDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Contributions [DataMember(Name = \"contributions\")] public int Contributions { get; init; } Property Value int Login [DataMember(Name = \"login\")] public required string Login { get; init; } Property Value string"
  },
  "api/SECODashBackend.Dtos.Contributors.html": {
    "href": "api/SECODashBackend.Dtos.Contributors.html",
    "title": "Namespace SECODashBackend.Dtos.Contributors | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Dtos.Contributors Classes ContributorDto Represents a data transfer object for a Contributor of a Project. TopContributorDto Represents a data transfer object for a Top Contributor of an ecosystem."
  },
  "api/SECODashBackend.Dtos.Ecosystem.DescriptionDto.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.DescriptionDto.html",
    "title": "Class DescriptionDto | SECODash Backend",
    "keywords": "Class DescriptionDto Namespace SECODashBackend.Dtos.Ecosystem Assembly SECODashBackend.dll Represents a data transfer object for the description of an ecosystem. public class DescriptionDto Inheritance object DescriptionDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description [DataMember(Name = \"description\")] public required string Description { get; init; } Property Value string"
  },
  "api/SECODashBackend.Dtos.Ecosystem.DescriptionRequestDto.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.DescriptionRequestDto.html",
    "title": "Class DescriptionRequestDto | SECODash Backend",
    "keywords": "Class DescriptionRequestDto Namespace SECODashBackend.Dtos.Ecosystem Assembly SECODashBackend.dll Represents a request DTO for updating the description of an ecosystem. public class DescriptionRequestDto Inheritance object DescriptionRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description [DataMember(Name = \"description\")] public required string Description { get; init; } Property Value string Ecosystem [DataMember(Name = \"ecosystem\")] public required string Ecosystem { get; init; } Property Value string"
  },
  "api/SECODashBackend.Dtos.Ecosystem.EcosystemCreationDto.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.EcosystemCreationDto.html",
    "title": "Class EcosystemCreationDto | SECODash Backend",
    "keywords": "Class EcosystemCreationDto Namespace SECODashBackend.Dtos.Ecosystem Assembly SECODashBackend.dll This class represents a data transfer object of all data needed to create a new ecosystem. public class EcosystemCreationDto Inheritance object EcosystemCreationDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description [DataMember(Name = \"description\")] public string Description { get; set; } Property Value string EcosystemName [DataMember(Name = \"ecosystemName\")] public string EcosystemName { get; set; } Property Value string Email [DataMember(Name = \"email\")] public string Email { get; set; } Property Value string Excluded [DataMember(Name = \"excluded\")] public List<string> Excluded { get; set; } Property Value List<string> Technologies [DataMember(Name = \"technologies\")] public List<string> Technologies { get; set; } Property Value List<string> Topics [DataMember(Name = \"topics\")] public List<string> Topics { get; set; } Property Value List<string>"
  },
  "api/SECODashBackend.Dtos.Ecosystem.EcosystemDto.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.EcosystemDto.html",
    "title": "Class EcosystemDto | SECODash Backend",
    "keywords": "Class EcosystemDto Namespace SECODashBackend.Dtos.Ecosystem Assembly SECODashBackend.dll Represents a data transfer object for an Ecosystem. public class EcosystemDto Inheritance object EcosystemDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description [DataMember(Name = \"description\")] public string? Description { get; set; } Property Value string DisplayName [DataMember(Name = \"displayName\")] public string? DisplayName { get; set; } Property Value string NumberOfContributions [DataMember(Name = \"numberOfContributions\")] public int? NumberOfContributions { get; set; } Property Value int? NumberOfContributors [DataMember(Name = \"numberOfContributors\")] public int? NumberOfContributors { get; set; } Property Value int? NumberOfProjects [DataMember(Name = \"numberOfProjects\")] public long NumberOfProjects { get; set; } Property Value long NumberOfStars [DataMember(Name = \"numberOfStars\")] public int? NumberOfStars { get; set; } Property Value int? NumberOfTopics [DataMember(Name = \"numberOfTopics\")] public int? NumberOfTopics { get; set; } Property Value int? TimedDataEcosystem The number of active projects in the ecosystem over time [DataMember(Name = \"timedDataEcosystem\")] public List<TopicsBucketDto>? TimedDataEcosystem { get; set; } Property Value List<TopicsBucketDto> TimedDataTopics The number of active projects in the sub ecosystems over time [DataMember(Name = \"timedDataTopics\")] public List<TopicsBucketDto>? TimedDataTopics { get; set; } Property Value List<TopicsBucketDto> TopContributors [DataMember(Name = \"topContributors\")] public required List<TopContributorDto> TopContributors { get; init; } Property Value List<TopContributorDto> TopLanguages [DataMember(Name = \"topLanguages\")] public required List<ProgrammingLanguageDto> TopLanguages { get; init; } Property Value List<ProgrammingLanguageDto> TopProjects [DataMember(Name = \"topProjects\")] public required List<TopProjectDto> TopProjects { get; init; } Property Value List<TopProjectDto> TopSubEcosystems [DataMember(Name = \"subEcosystems\")] public required List<SubEcosystemDto> TopSubEcosystems { get; init; } Property Value List<SubEcosystemDto> TopTechnologies [DataMember(Name = \"topTechnologies\")] public required List<SubEcosystemDto> TopTechnologies { get; init; } Property Value List<SubEcosystemDto> Topics [DataMember(Name = \"topics\")] public required List<string> Topics { get; init; } Property Value List<string>"
  },
  "api/SECODashBackend.Dtos.Ecosystem.EcosystemOverviewDto.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.EcosystemOverviewDto.html",
    "title": "Class EcosystemOverviewDto | SECODash Backend",
    "keywords": "Class EcosystemOverviewDto Namespace SECODashBackend.Dtos.Ecosystem Assembly SECODashBackend.dll Represents a data transfer object for the supplementary data of a top level Ecosystem such as Agriculture, Quantum or Artificial Intelligence. public class EcosystemOverviewDto Inheritance object EcosystemOverviewDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description [DataMember(Name = \"description\")] public string? Description { get; set; } Property Value string DisplayName [DataMember(Name = \"displayName\")] public string? DisplayName { get; set; } Property Value string NumberOfStars [DataMember(Name = \"numberOfStars\")] public int? NumberOfStars { get; set; } Property Value int?"
  },
  "api/SECODashBackend.Dtos.Ecosystem.EcosystemRequestDto.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.EcosystemRequestDto.html",
    "title": "Class EcosystemRequestDto | SECODash Backend",
    "keywords": "Class EcosystemRequestDto Namespace SECODashBackend.Dtos.Ecosystem Assembly SECODashBackend.dll Represents a data transfer object for an Ecosystem request by the front-end. public class EcosystemRequestDto Inheritance object EcosystemRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EndTime [DataMember(Name = \"endTime\")] public DateTime EndTime { get; set; } Property Value DateTime NumberOfTopContributors [DataMember(Name = \"numberOfTopContributors\")] public int? NumberOfTopContributors { get; set; } Property Value int? NumberOfTopLanguages [DataMember(Name = \"numberOfTopLanguages\")] public int? NumberOfTopLanguages { get; set; } Property Value int? NumberOfTopProjects [DataMember(Name = \"numberOfTopProjects\")] public int? NumberOfTopProjects { get; set; } Property Value int? NumberOfTopSubEcosystems [DataMember(Name = \"numberOfSubEcosystems\")] public int? NumberOfTopSubEcosystems { get; set; } Property Value int? NumberOfTopTechnologies [DataMember(Name = \"numberOfTopTechnologies\")] public int? NumberOfTopTechnologies { get; set; } Property Value int? NumbersOfDaysPerBucket [DataMember(Name = \"numbersOfDaysPerBucket\")] public int? NumbersOfDaysPerBucket { get; set; } Property Value int? StartTime [DataMember(Name = \"startTime\")] public DateTime StartTime { get; set; } Property Value DateTime Topics [DataMember(Name = \"topics\")] public required List<string> Topics { get; init; } Property Value List<string>"
  },
  "api/SECODashBackend.Dtos.Ecosystem.RemoveEcosystemDto.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.RemoveEcosystemDto.html",
    "title": "Class RemoveEcosystemDto | SECODash Backend",
    "keywords": "Class RemoveEcosystemDto Namespace SECODashBackend.Dtos.Ecosystem Assembly SECODashBackend.dll public class RemoveEcosystemDto Inheritance object RemoveEcosystemDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ecosystem [DataMember(Name = \"ecosystem\")] public string Ecosystem { get; set; } Property Value string"
  },
  "api/SECODashBackend.Dtos.Ecosystem.SubEcosystemDto.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.SubEcosystemDto.html",
    "title": "Class SubEcosystemDto | SECODash Backend",
    "keywords": "Class SubEcosystemDto Namespace SECODashBackend.Dtos.Ecosystem Assembly SECODashBackend.dll Represents a data transfer object for a sub-ecosystem. public class SubEcosystemDto Inheritance object SubEcosystemDto Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProjectCount [DataMember(Name = \"projectCount\")] public required long ProjectCount { get; init; } Property Value long Topic [DataMember(Name = \"topic\")] public required string Topic { get; init; } Property Value string Methods Equals(object?) Determines whether the specified object is equal to the current object. public override bool Equals(object? obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/SECODashBackend.Dtos.Ecosystem.html": {
    "href": "api/SECODashBackend.Dtos.Ecosystem.html",
    "title": "Namespace SECODashBackend.Dtos.Ecosystem | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Dtos.Ecosystem Classes DescriptionDto Represents a data transfer object for the description of an ecosystem. DescriptionRequestDto Represents a request DTO for updating the description of an ecosystem. EcosystemCreationDto This class represents a data transfer object of all data needed to create a new ecosystem. EcosystemDto Represents a data transfer object for an Ecosystem. EcosystemOverviewDto Represents a data transfer object for the supplementary data of a top level Ecosystem such as Agriculture, Quantum or Artificial Intelligence. EcosystemRequestDto Represents a data transfer object for an Ecosystem request by the front-end. RemoveEcosystemDto SubEcosystemDto Represents a data transfer object for a sub-ecosystem."
  },
  "api/SECODashBackend.Dtos.ProgrammingLanguage.ProgrammingLanguageDto.html": {
    "href": "api/SECODashBackend.Dtos.ProgrammingLanguage.ProgrammingLanguageDto.html",
    "title": "Class ProgrammingLanguageDto | SECODash Backend",
    "keywords": "Class ProgrammingLanguageDto Namespace SECODashBackend.Dtos.ProgrammingLanguage Assembly SECODashBackend.dll Represents a data transfer object for a programming language used in an ecosystem. public class ProgrammingLanguageDto Inheritance object ProgrammingLanguageDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Language [DataMember(Name = \"language\")] public required string Language { get; init; } Property Value string Percentage [DataMember(Name = \"percentage\")] public float Percentage { get; set; } Property Value float"
  },
  "api/SECODashBackend.Dtos.ProgrammingLanguage.html": {
    "href": "api/SECODashBackend.Dtos.ProgrammingLanguage.html",
    "title": "Namespace SECODashBackend.Dtos.ProgrammingLanguage | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Dtos.ProgrammingLanguage Classes ProgrammingLanguageDto Represents a data transfer object for a programming language used in an ecosystem."
  },
  "api/SECODashBackend.Dtos.Project.ProjectDto.html": {
    "href": "api/SECODashBackend.Dtos.Project.ProjectDto.html",
    "title": "Class ProjectDto | SECODash Backend",
    "keywords": "Class ProjectDto Namespace SECODashBackend.Dtos.Project Assembly SECODashBackend.dll Represents a data transfer object for a Project. [DataContract] public class ProjectDto Inheritance object ProjectDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AdditionalTopics [DataMember(Name = \"additionalTopics\")] public List<string>? AdditionalTopics { get; set; } Property Value List<string> Contributors [DataMember(Name = \"contributors\")] public List<ContributorDto>? Contributors { get; set; } Property Value List<ContributorDto> CreatedAt [DataMember(Name = \"createdAt\")] public DateTime CreatedAt { get; set; } Property Value DateTime Description [DataMember(Name = \"description\")] public string? Description { get; set; } Property Value string Id [DataMember(Name = \"id\")] public required string Id { get; init; } Property Value string Languages [DataMember(Name = \"languages\")] public List<ProgrammingLanguageDto> Languages { get; set; } Property Value List<ProgrammingLanguageDto> LatestDefaultBranchCommitDate [DataMember(Name = \"latestDefaultBranchCommitDate\")] public DateTime? LatestDefaultBranchCommitDate { get; set; } Property Value DateTime? Name [DataMember(Name = \"name\")] public required string Name { get; set; } Property Value string NumberOfStars [DataMember(Name = \"numberOfStars\")] public int NumberOfStars { get; set; } Property Value int Owner [DataMember(Name = \"owner\")] public required string Owner { get; set; } Property Value string ReadMe [DataMember(Name = \"readme\")] public string? ReadMe { get; set; } Property Value string Topics [DataMember(Name = \"topics\")] public List<string> Topics { get; set; } Property Value List<string> TotalSize [DataMember(Name = \"totalSize\")] public int? TotalSize { get; set; } Property Value int?"
  },
  "api/SECODashBackend.Dtos.Project.ProjectRequestDto.html": {
    "href": "api/SECODashBackend.Dtos.Project.ProjectRequestDto.html",
    "title": "Class ProjectRequestDto | SECODash Backend",
    "keywords": "Class ProjectRequestDto Namespace SECODashBackend.Dtos.Project Assembly SECODashBackend.dll Represents a data transfer object for a Project requested from the Spider. [DataContract] public class ProjectRequestDto Inheritance object ProjectRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties OwnerName [DataMember(Name = \"ownerName\")] public required string OwnerName { get; init; } Property Value string RepoName [DataMember(Name = \"repoName\")] public required string RepoName { get; init; } Property Value string"
  },
  "api/SECODashBackend.Dtos.Project.TopProjectDto.html": {
    "href": "api/SECODashBackend.Dtos.Project.TopProjectDto.html",
    "title": "Class TopProjectDto | SECODash Backend",
    "keywords": "Class TopProjectDto Namespace SECODashBackend.Dtos.Project Assembly SECODashBackend.dll Represents a data transfer object for a top project of an ecosystem based on the number of stars. [DataContract] public class TopProjectDto Inheritance object TopProjectDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Name [DataMember(Name = \"name\")] public required string Name { get; set; } Property Value string NumberOfStars [DataMember(Name = \"numberOfStars\")] public int NumberOfStars { get; set; } Property Value int Owner [DataMember(Name = \"owner\")] public required string Owner { get; set; } Property Value string"
  },
  "api/SECODashBackend.Dtos.Project.html": {
    "href": "api/SECODashBackend.Dtos.Project.html",
    "title": "Namespace SECODashBackend.Dtos.Project | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Dtos.Project Classes ProjectDto Represents a data transfer object for a Project. ProjectRequestDto Represents a data transfer object for a Project requested from the Spider. TopProjectDto Represents a data transfer object for a top project of an ecosystem based on the number of stars."
  },
  "api/SECODashBackend.Dtos.TimedData.TopicsBucketDto.html": {
    "href": "api/SECODashBackend.Dtos.TimedData.TopicsBucketDto.html",
    "title": "Class TopicsBucketDto | SECODash Backend",
    "keywords": "Class TopicsBucketDto Namespace SECODashBackend.Dtos.TimedData Assembly SECODashBackend.dll Represents a data transfer object for a bucket that contains a list of topics with the number of active projects for a given time period. [DataContract] public class TopicsBucketDto Inheritance object TopicsBucketDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DateLabel [DataMember(Name = \"bucketDateLabel\")] public string DateLabel { get; init; } Property Value string Topics [DataMember(Name = \"topics\")] public List<SubEcosystemDto> Topics { get; init; } Property Value List<SubEcosystemDto>"
  },
  "api/SECODashBackend.Dtos.TimedData.html": {
    "href": "api/SECODashBackend.Dtos.TimedData.html",
    "title": "Namespace SECODashBackend.Dtos.TimedData | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Dtos.TimedData Classes TopicsBucketDto Represents a data transfer object for a bucket that contains a list of topics with the number of active projects for a given time period."
  },
  "api/SECODashBackend.Dtos.Topic.TopicRequestDto.html": {
    "href": "api/SECODashBackend.Dtos.Topic.TopicRequestDto.html",
    "title": "Class TopicRequestDto | SECODash Backend",
    "keywords": "Class TopicRequestDto Namespace SECODashBackend.Dtos.Topic Assembly SECODashBackend.dll Data Transfer Object for a readme [DataContract] public class TopicRequestDto Inheritance object TopicRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description [DataMember(Name = \"description\")] public string? Description { get; set; } Property Value string Id [DataMember(Name = \"id\")] public required string Id { get; init; } Property Value string Name [DataMember(Name = \"name\")] public required string Name { get; init; } Property Value string Readme [DataMember(Name = \"readMe\")] public required string Readme { get; init; } Property Value string"
  },
  "api/SECODashBackend.Dtos.Topic.TopicResponseDto.html": {
    "href": "api/SECODashBackend.Dtos.Topic.TopicResponseDto.html",
    "title": "Class TopicResponseDto | SECODash Backend",
    "keywords": "Class TopicResponseDto Namespace SECODashBackend.Dtos.Topic Assembly SECODashBackend.dll Represents a data transfer object for a topic returned by the Data Processor. public class TopicResponseDto Inheritance object TopicResponseDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProjectId [DataMember(Name = \"projectId\")] public required string ProjectId { get; init; } Property Value string Topics [DataMember(Name = \"topics\")] public List<string> Topics { get; init; } Property Value List<string>"
  },
  "api/SECODashBackend.Dtos.Topic.html": {
    "href": "api/SECODashBackend.Dtos.Topic.html",
    "title": "Namespace SECODashBackend.Dtos.Topic | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Dtos.Topic Classes TopicRequestDto Data Transfer Object for a readme TopicResponseDto Represents a data transfer object for a topic returned by the Data Processor."
  },
  "api/SECODashBackend.Dtos.User.UpdatePermissionsDto.html": {
    "href": "api/SECODashBackend.Dtos.User.UpdatePermissionsDto.html",
    "title": "Class UpdatePermissionsDto | SECODash Backend",
    "keywords": "Class UpdatePermissionsDto Namespace SECODashBackend.Dtos.User Assembly SECODashBackend.dll public class UpdatePermissionsDto Inheritance object UpdatePermissionsDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserName [DataMember(Name = \"userName\")] public required string UserName { get; set; } Property Value string UserType [DataMember(Name = \"userType\")] public required User.UserType UserType { get; init; } Property Value User.UserType"
  },
  "api/SECODashBackend.Dtos.User.UserPermissionsDto.html": {
    "href": "api/SECODashBackend.Dtos.User.UserPermissionsDto.html",
    "title": "Class UserPermissionsDto | SECODash Backend",
    "keywords": "Class UserPermissionsDto Namespace SECODashBackend.Dtos.User Assembly SECODashBackend.dll This class represents the permissions a User has. UserType is the permissions level. Ecosystems is the list of ecosystem. public class UserPermissionsDto Inheritance object UserPermissionsDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ecosystems [DataMember(Name = \"ecosystems\")] public required List<string> Ecosystems { get; set; } Property Value List<string> UserType [DataMember(Name = \"userType\")] public required User.UserType UserType { get; set; } Property Value User.UserType"
  },
  "api/SECODashBackend.Dtos.User.UserTypeDto.html": {
    "href": "api/SECODashBackend.Dtos.User.UserTypeDto.html",
    "title": "Class UserTypeDto | SECODash Backend",
    "keywords": "Class UserTypeDto Namespace SECODashBackend.Dtos.User Assembly SECODashBackend.dll Represents a data transfer object for user type. public class UserTypeDto Inheritance object UserTypeDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserType [DataMember(Name = \"userType\")] public required User.UserType UserType { get; init; } Property Value User.UserType"
  },
  "api/SECODashBackend.Dtos.User.UserTypeRequestDto.html": {
    "href": "api/SECODashBackend.Dtos.User.UserTypeRequestDto.html",
    "title": "Class UserTypeRequestDto | SECODash Backend",
    "keywords": "Class UserTypeRequestDto Namespace SECODashBackend.Dtos.User Assembly SECODashBackend.dll Represents a request DTO for user type. public class UserTypeRequestDto Inheritance object UserTypeRequestDto Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id [DataMember(Name = \"id\")] public required string Id { get; init; } Property Value string Username [DataMember(Name = \"userName\")] public required string Username { get; init; } Property Value string"
  },
  "api/SECODashBackend.Dtos.User.html": {
    "href": "api/SECODashBackend.Dtos.User.html",
    "title": "Namespace SECODashBackend.Dtos.User | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Dtos.User Classes UpdatePermissionsDto UserPermissionsDto This class represents the permissions a User has. UserType is the permissions level. Ecosystems is the list of ecosystem. UserTypeDto Represents a data transfer object for user type. UserTypeRequestDto Represents a request DTO for user type."
  },
  "api/SECODashBackend.Logging.FileLogger.html": {
    "href": "api/SECODashBackend.Logging.FileLogger.html",
    "title": "Class FileLogger | SECODash Backend",
    "keywords": "Class FileLogger Namespace SECODashBackend.Logging Assembly SECODashBackend.dll This class represents a logger that logs to a file. public class FileLogger : ILogger Inheritance object FileLogger Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileLogger(FileLoggerProvider) This class represents a logger that logs to a file. public FileLogger(FileLoggerProvider fileLoggerProvider) Parameters fileLoggerProvider FileLoggerProvider Methods BeginScope<TState>(TState) Begins a logical operation scope. public IDisposable? BeginScope<TState>(TState state) where TState : notnull Parameters state TState The identifier for the scope. Returns IDisposable An IDisposable that ends the logical operation scope on dispose. Type Parameters TState The type of the state to begin scope for. IsEnabled(LogLevel) Checks if the given logLevel is enabled. public bool IsEnabled(LogLevel logLevel) Parameters logLevel LogLevel Level to be checked. Returns bool true if enabled. Log<TState>(LogLevel, EventId, TState, Exception?, Func<TState, Exception?, string>) Writes a log entry. public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter) Parameters logLevel LogLevel Entry will be written on this level. eventId EventId Id of the event. state TState The entry to be written. Can be also an object. exception Exception The exception related to this entry. formatter Func<TState, Exception, string> Function to create a string message of the state and exception. Type Parameters TState The type of the object to be written."
  },
  "api/SECODashBackend.Logging.FileLoggerExtensions.html": {
    "href": "api/SECODashBackend.Logging.FileLoggerExtensions.html",
    "title": "Class FileLoggerExtensions | SECODash Backend",
    "keywords": "Class FileLoggerExtensions Namespace SECODashBackend.Logging Assembly SECODashBackend.dll This class configures and builds the FileLoggerProvider. public static class FileLoggerExtensions Inheritance object FileLoggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddFileLogger(ILoggingBuilder, Action<FileLoggerOptions>) public static ILoggingBuilder AddFileLogger(this ILoggingBuilder builder, Action<FileLoggerOptions> configure) Parameters builder ILoggingBuilder configure Action<FileLoggerOptions> Returns ILoggingBuilder"
  },
  "api/SECODashBackend.Logging.FileLoggerHelper.html": {
    "href": "api/SECODashBackend.Logging.FileLoggerHelper.html",
    "title": "Class FileLoggerHelper | SECODash Backend",
    "keywords": "Class FileLoggerHelper Namespace SECODashBackend.Logging Assembly SECODashBackend.dll This static class handles async logging to a file by storing records in an intermediate collection. public static class FileLoggerHelper Inheritance object FileLoggerHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRecord(string, string) Add a record to the collection to be logged later. public static void AddRecord(string logMessage, string filePath) Parameters logMessage string The log message as string. filePath string Filepath as string for the location of the log file."
  },
  "api/SECODashBackend.Logging.FileLoggerOptions.html": {
    "href": "api/SECODashBackend.Logging.FileLoggerOptions.html",
    "title": "Class FileLoggerOptions | SECODash Backend",
    "keywords": "Class FileLoggerOptions Namespace SECODashBackend.Logging Assembly SECODashBackend.dll This class stores the options for the FileLoggerProvider as string FilePath and string FolderPath. public class FileLoggerOptions Inheritance object FileLoggerOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FilePath public virtual string FilePath { get; set; } Property Value string FolderPath public virtual string FolderPath { get; set; } Property Value string"
  },
  "api/SECODashBackend.Logging.FileLoggerProvider.html": {
    "href": "api/SECODashBackend.Logging.FileLoggerProvider.html",
    "title": "Class FileLoggerProvider | SECODash Backend",
    "keywords": "Class FileLoggerProvider Namespace SECODashBackend.Logging Assembly SECODashBackend.dll Can create an instance of the FileLogger. [ProviderAlias(\"File\")] public class FileLoggerProvider : ILoggerProvider, IDisposable Inheritance object FileLoggerProvider Implements ILoggerProvider IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileLoggerProvider(IOptions<FileLoggerOptions>) This constructor uses the FileLoggerOptions to create a directory for storing log files if this folder does not yet exist. public FileLoggerProvider(IOptions<FileLoggerOptions> options) Parameters options IOptions<FileLoggerOptions> Represents the file location the FileLogger should write to. Fields Options public readonly FileLoggerOptions Options Field Value FileLoggerOptions Methods CreateLogger(string) Creates a new ILogger instance. public ILogger CreateLogger(string categoryName) Parameters categoryName string The category name for messages produced by the logger. Returns ILogger The instance of ILogger that was created. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/SECODashBackend.Logging.html": {
    "href": "api/SECODashBackend.Logging.html",
    "title": "Namespace SECODashBackend.Logging | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Logging Classes FileLogger This class represents a logger that logs to a file. FileLoggerExtensions This class configures and builds the FileLoggerProvider. FileLoggerHelper This static class handles async logging to a file by storing records in an intermediate collection. FileLoggerOptions This class stores the options for the FileLoggerProvider as string FilePath and string FolderPath. FileLoggerProvider Can create an instance of the FileLogger."
  },
  "api/SECODashBackend.Migrations.Initial.html": {
    "href": "api/SECODashBackend.Migrations.Initial.html",
    "title": "Class Initial | SECODash Backend",
    "keywords": "Class Initial Namespace SECODashBackend.Migrations Assembly SECODashBackend.dll A base class inherited by each EF Core migration. [DbContext(typeof(EcosystemsContext))] [Migration(\"20240128102554_Initial\")] public class Initial : Migration Inheritance object Migration Initial Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/SECODashBackend.Migrations.html": {
    "href": "api/SECODashBackend.Migrations.html",
    "title": "Namespace SECODashBackend.Migrations | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Migrations Classes Initial A base class inherited by each EF Core migration."
  },
  "api/SECODashBackend.Models.BannedTopic.html": {
    "href": "api/SECODashBackend.Models.BannedTopic.html",
    "title": "Class BannedTopic | SECODash Backend",
    "keywords": "Class BannedTopic Namespace SECODashBackend.Models Assembly SECODashBackend.dll A banned topic is a topic the creator of an ecosystem has flagged to not be shown on the dashboard. public class BannedTopic Inheritance object BannedTopic Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ecosystems The ecosystems in which this is term is a banned topic. [DataMember(Name = \"ecosystems\")] public List<Ecosystem> Ecosystems { get; set; } Property Value List<Ecosystem> Term The term used in taxonomy for software ecosystems. [DataMember(Name = \"term\")] [Key] public required string Term { get; set; } Property Value string"
  },
  "api/SECODashBackend.Models.Ecosystem.html": {
    "href": "api/SECODashBackend.Models.Ecosystem.html",
    "title": "Class Ecosystem | SECODash Backend",
    "keywords": "Class Ecosystem Namespace SECODashBackend.Models Assembly SECODashBackend.dll This class represents an Ecosystem. An Ecosystem is a collection of projects that are related to each other. [Index(\"Name\", new string[] { }, IsUnique = true)] public class Ecosystem Inheritance object Ecosystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BannedTopics [DataMember(Name = \"bannedTopic\")] public List<BannedTopic> BannedTopics { get; set; } Property Value List<BannedTopic> Description [DataMember(Name = \"description\")] public string? Description { get; set; } Property Value string DisplayName [DataMember(Name = \"displayName\")] public string? DisplayName { get; set; } Property Value string Id [DataMember(Name = \"id\")] public required string Id { get; init; } Property Value string Name [DataMember(Name = \"name\")] public required string Name { get; set; } Property Value string NumberOfStars [DataMember(Name = \"numberOfStars\")] public int? NumberOfStars { get; set; } Property Value int? Taxonomy [DataMember(Name = \"taxonomy\")] public List<Taxonomy> Taxonomy { get; set; } Property Value List<Taxonomy> Technologies [DataMember(Name = \"technologies\")] public List<Technology> Technologies { get; set; } Property Value List<Technology> Users [DataMember(Name = \"users\")] public List<User> Users { get; set; } Property Value List<User>"
  },
  "api/SECODashBackend.Models.Taxonomy.html": {
    "href": "api/SECODashBackend.Models.Taxonomy.html",
    "title": "Class Taxonomy | SECODash Backend",
    "keywords": "Class Taxonomy Namespace SECODashBackend.Models Assembly SECODashBackend.dll This class represents a Taxonomy. A Taxonomy is a term that is related to an ecosystem. [Index(\"Term\", new string[] { }, IsUnique = true)] public class Taxonomy Inheritance object Taxonomy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ecosystems The ecosystems in which this is term is a taxonomic term. [DataMember(Name = \"ecosystems\")] public List<Ecosystem> Ecosystems { get; set; } Property Value List<Ecosystem> Term The term used in taxonomy for software ecosystems. [DataMember(Name = \"term\")] [Key] public required string Term { get; set; } Property Value string"
  },
  "api/SECODashBackend.Models.Technology.html": {
    "href": "api/SECODashBackend.Models.Technology.html",
    "title": "Class Technology | SECODash Backend",
    "keywords": "Class Technology Namespace SECODashBackend.Models Assembly SECODashBackend.dll This class represents a Technology. A Technology is a term that has been assigned as a technology for a specific ecosystem. [Index(\"Term\", new string[] { }, IsUnique = true)] public class Technology Inheritance object Technology Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ecosystems The ecosystems in which this term is a technology. [DataMember(Name = \"ecosystems\")] public List<Ecosystem> Ecosystems { get; set; } Property Value List<Ecosystem> Term The term used in taxonomy for technology. [DataMember(Name = \"term\")] [Key] public required string Term { get; set; } Property Value string"
  },
  "api/SECODashBackend.Models.Topic.html": {
    "href": "api/SECODashBackend.Models.Topic.html",
    "title": "Class Topic | SECODash Backend",
    "keywords": "Class Topic Namespace SECODashBackend.Models Assembly SECODashBackend.dll This class represents a Topic. A Topic is a keyword that is related to a project and is used to define ecosystems. public class Topic Inheritance object Topic Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id [DataMember(Name = \"id\")] public int? Id { get; set; } Property Value int? Keywords [DataMember(Name = \"keywords\")] public required List<string> Keywords { get; init; } Property Value List<string> Label [DataMember(Name = \"label\")] public string? Label { get; set; } Property Value string Probability [DataMember(Name = \"probability\")] public required float Probability { get; init; } Property Value float"
  },
  "api/SECODashBackend.Models.User.UserType.html": {
    "href": "api/SECODashBackend.Models.User.UserType.html",
    "title": "Enum User.UserType | SECODash Backend",
    "keywords": "Enum User.UserType Namespace SECODashBackend.Models Assembly SECODashBackend.dll public enum User.UserType Fields Admin = 1 RootAdmin = 2 User = 0"
  },
  "api/SECODashBackend.Models.User.html": {
    "href": "api/SECODashBackend.Models.User.html",
    "title": "Class User | SECODash Backend",
    "keywords": "Class User Namespace SECODashBackend.Models Assembly SECODashBackend.dll A class that represents a User that has an Id, a UserName, a Type, and a List<T> Ecosystems. [Index(\"UserName\", new string[] { }, IsUnique = true)] public class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ecosystems Ecosystems represents the ecosystems that the user can edit. [DataMember(Name = \"ecosystems\")] public List<Ecosystem> Ecosystems { get; set; } Property Value List<Ecosystem> Id Id is a string of numbers generated by the login provider. [DataMember(Name = \"id\")] public required string Id { get; set; } Property Value string Type Usertype is the permissions level of the User. [DataMember(Name = \"userType\")] public required User.UserType Type { get; set; } Property Value User.UserType UserName Username is provided by the user on creation of an account. [DataMember(Name = \"userName\")] public required string UserName { get; set; } Property Value string"
  },
  "api/SECODashBackend.Models.html": {
    "href": "api/SECODashBackend.Models.html",
    "title": "Namespace SECODashBackend.Models | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Models Classes BannedTopic A banned topic is a topic the creator of an ecosystem has flagged to not be shown on the dashboard. Ecosystem This class represents an Ecosystem. An Ecosystem is a collection of projects that are related to each other. Taxonomy This class represents a Taxonomy. A Taxonomy is a term that is related to an ecosystem. Technology This class represents a Technology. A Technology is a term that has been assigned as a technology for a specific ecosystem. Topic This class represents a Topic. A Topic is a keyword that is related to a project and is used to define ecosystems. User A class that represents a User that has an Id, a UserName, a Type, and a List<T> Ecosystems. Enums User.UserType"
  },
  "api/SECODashBackend.Services.Analysis.ElasticsearchAnalysisService.html": {
    "href": "api/SECODashBackend.Services.Analysis.ElasticsearchAnalysisService.html",
    "title": "Class ElasticsearchAnalysisService | SECODash Backend",
    "keywords": "Class ElasticsearchAnalysisService Namespace SECODashBackend.Services.Analysis Assembly SECODashBackend.dll Service that analyses an ecosystem by querying the Elasticsearch index for projects that contain the given topics. The service is responsible for retrieving the relevant data from the search response and converting it to the correct format. public class ElasticsearchAnalysisService : IAnalysisService Inheritance object ElasticsearchAnalysisService Implements IAnalysisService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ElasticsearchAnalysisService(IElasticsearchService) Service that analyses an ecosystem by querying the Elasticsearch index for projects that contain the given topics. The service is responsible for retrieving the relevant data from the search response and converting it to the correct format. public ElasticsearchAnalysisService(IElasticsearchService elasticsearchService) Parameters elasticsearchService IElasticsearchService Methods AnalyzeEcosystemAsync(List<string>, List<Technology>, int, int, int, int, int, DateTime, DateTime, int) Queries the Elasticsearch index for projects that contain the given topics and analyses the ecosystem. The analysis consists of two parts: Retrieving the top x programming languages Retrieving the top x sub-ecosystems/topics public Task<EcosystemDto> AnalyzeEcosystemAsync(List<string> topics, List<Technology> technologies, int numberOfTopLanguages, int numberOfTopSubEcosystems, int numberOfTopContributors, int numberOfTopTechnologies, int numberOfTopProjects, DateTime startTime, DateTime endTime, int timeBucket) Parameters topics List<string> A list of topics that define the ecosystem. technologies List<Technology> The technologies of an ecosystem. numberOfTopLanguages int The number of top programming languages to retrieve. numberOfTopSubEcosystems int The number of top sub-ecosystems to retrieve. numberOfTopContributors int The number of top contributors to retrieve. numberOfTopTechnologies int The number of top technologies to retrieve. numberOfTopProjects int The number of top projects to retrieve startTime DateTime The start date of the period of time to retrieve. endTime DateTime The end date of the period of time to retrieve. timeBucket int The time frame (in days) we want to use to retrieve projects between the start and end time. Returns Task<EcosystemDto> An EcosystemDto with the top x languages, sub-ecosystems and contributors. FilterSubEcosystems(IEnumerable<SubEcosystemDto>, List<string>, List<string>) Filters out sub-ecosystems that are in the topics list that defines the ecosystem, have fewer than the minimum number of projects, are programming languages or are technologies. public static List<SubEcosystemDto> FilterSubEcosystems(IEnumerable<SubEcosystemDto> subEcosystemDtos, List<string> topics, List<string> technologies) Parameters subEcosystemDtos IEnumerable<SubEcosystemDto> A list of sub-ecosystems. topics List<string> A list of topics that define the ecosystem. technologies List<string> A list of technologies that define the ecosystem. Returns List<SubEcosystemDto> A list of sub-ecosystems filtered by the given topics. SortAndNormalizeLanguages(List<ProgrammingLanguageDto>, int) Converts a list of all the programming languages in an ecosystem with the sum of their usage percentages over all projects to a \"Top x\" list of x length in descending order of percentage with the percentages normalised. public static List<ProgrammingLanguageDto> SortAndNormalizeLanguages(List<ProgrammingLanguageDto> programmingLanguageDtos, int numberOfTopLanguages) Parameters programmingLanguageDtos List<ProgrammingLanguageDto> A list of all the programming languages in an ecosystem with the sum of their usage percentages over all projects. numberOfTopLanguages int The number of top languages to retrieve. Returns List<ProgrammingLanguageDto> A Top x list of the top languages in an ecosystem. SortSubEcosystems(IEnumerable<SubEcosystemDto>) Sorts a list of sub-ecosystems in descending order of the number of projects and returns the sorted list. public static IEnumerable<SubEcosystemDto> SortSubEcosystems(IEnumerable<SubEcosystemDto> subEcosystemDtos) Parameters subEcosystemDtos IEnumerable<SubEcosystemDto> A list of sub-ecosystems. Returns IEnumerable<SubEcosystemDto> A list of sub-ecosystems sorted in descending order of the number of projects."
  },
  "api/SECODashBackend.Services.Analysis.IAnalysisService.html": {
    "href": "api/SECODashBackend.Services.Analysis.IAnalysisService.html",
    "title": "Interface IAnalysisService | SECODash Backend",
    "keywords": "Interface IAnalysisService Namespace SECODashBackend.Services.Analysis Assembly SECODashBackend.dll Interface for services that analyse an ecosystem. public interface IAnalysisService Methods AnalyzeEcosystemAsync(List<string>, List<Technology>, int, int, int, int, int, DateTime, DateTime, int) Analyzes the ecosystem given by the topics. Task<EcosystemDto> AnalyzeEcosystemAsync(List<string> topics, List<Technology> technologies, int numberOfTopLanguages, int numberOfTopSubEcosystems, int numberOfTopContributors, int numberOfTopTechnologies, int numberOfTopProjects, DateTime startTime, DateTime endTime, int timeBucket) Parameters topics List<string> The topics of the ecosystem. technologies List<Technology> The technologies of an ecosystem. numberOfTopLanguages int The number of top languages to get. numberOfTopSubEcosystems int The number of top sub ecosystems to get. numberOfTopContributors int The number of top contributors to get. numberOfTopTechnologies int The number od top technologies to retrieve. numberOfTopProjects int The number of top projects to retrieve startTime DateTime The start date of the period of time to retrieve. endTime DateTime The end date of the period of time to retrieve. timeBucket int The time frame (in days) we want to use to retrieve projects between the start and end time. Returns Task<EcosystemDto> The result of the analysis."
  },
  "api/SECODashBackend.Services.Analysis.html": {
    "href": "api/SECODashBackend.Services.Analysis.html",
    "title": "Namespace SECODashBackend.Services.Analysis | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Services.Analysis Classes ElasticsearchAnalysisService Service that analyses an ecosystem by querying the Elasticsearch index for projects that contain the given topics. The service is responsible for retrieving the relevant data from the search response and converting it to the correct format. Interfaces IAnalysisService Interface for services that analyse an ecosystem."
  },
  "api/SECODashBackend.Services.DataProcessor.DataProcessorService.html": {
    "href": "api/SECODashBackend.Services.DataProcessor.DataProcessorService.html",
    "title": "Class DataProcessorService | SECODash Backend",
    "keywords": "Class DataProcessorService Namespace SECODashBackend.Services.DataProcessor Assembly SECODashBackend.dll This service is responsible for sending the readme data to the data processor and returning the resulting topics. public class DataProcessorService : IDataProcessorService Inheritance object DataProcessorService Implements IDataProcessorService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DataProcessorService(string) public DataProcessorService(string connectionString) Parameters connectionString string Methods GetTopics(List<ProjectDto>) Sends the readme data to the data processor and modifies projectDTOS by adding the resulting topics. public Task<List<ProjectDto>> GetTopics(List<ProjectDto> projectDtos) Parameters projectDtos List<ProjectDto> List of project data. Returns Task<List<ProjectDto>> Exceptions HttpRequestException Thrown if the request cannot be deserialized into a List of ProjectTopicsDtos."
  },
  "api/SECODashBackend.Services.DataProcessor.IDataProcessorService.html": {
    "href": "api/SECODashBackend.Services.DataProcessor.IDataProcessorService.html",
    "title": "Interface IDataProcessorService | SECODash Backend",
    "keywords": "Interface IDataProcessorService Namespace SECODashBackend.Services.DataProcessor Assembly SECODashBackend.dll Interface for the service is responsible for sending the readme data to the data processor and returning the resulting topics. public interface IDataProcessorService Methods GetTopics(List<ProjectDto>) Sends the readme data to the data processor and returns the resulting topics. Task<List<ProjectDto>> GetTopics(List<ProjectDto> projectDtos) Parameters projectDtos List<ProjectDto> Returns Task<List<ProjectDto>> The resulting topics."
  },
  "api/SECODashBackend.Services.DataProcessor.html": {
    "href": "api/SECODashBackend.Services.DataProcessor.html",
    "title": "Namespace SECODashBackend.Services.DataProcessor | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Services.DataProcessor Classes DataProcessorService This service is responsible for sending the readme data to the data processor and returning the resulting topics. Interfaces IDataProcessorService Interface for the service is responsible for sending the readme data to the data processor and returning the resulting topics."
  },
  "api/SECODashBackend.Services.Ecosystems.EcosystemsService.html": {
    "href": "api/SECODashBackend.Services.Ecosystems.EcosystemsService.html",
    "title": "Class EcosystemsService | SECODash Backend",
    "keywords": "Class EcosystemsService Namespace SECODashBackend.Services.Ecosystems Assembly SECODashBackend.dll This service is responsible for handling all ecosystem-related requests. It uses the EcosystemsContext to interact with the database. It uses the AnalysisService to analyze ecosystems. public class EcosystemsService : IEcosystemsService Inheritance object EcosystemsService Implements IEcosystemsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EcosystemsService(EcosystemsContext, IAnalysisService) This service is responsible for handling all ecosystem-related requests. It uses the EcosystemsContext to interact with the database. It uses the AnalysisService to analyze ecosystems. public EcosystemsService(EcosystemsContext dbContext, IAnalysisService analysisService) Parameters dbContext EcosystemsContext analysisService IAnalysisService Methods AddTopicToEcosystem(List<Taxonomy>, List<Technology>, List<BannedTopic>, string) Link all topics provided to the new ecosystem. public Task AddTopicToEcosystem(List<Taxonomy> tax, List<Technology> tech, List<BannedTopic> banned, string eco) Parameters tax List<Taxonomy> List<T> of Taxonomy to add to the ecosystem. tech List<Technology> List<T> of Technology to add to the ecosystem. banned List<BannedTopic> List<T> of BannedTopic to add to the ecosystem. eco string The name of the ecosystem to add topics to. Returns Task CreateEcosystem(EcosystemCreationDto) Create an ecosystem and add it to the Database for top-level ecosystems. public Task<bool> CreateEcosystem(EcosystemCreationDto dto) Parameters dto EcosystemCreationDto The data transfer object containing all required information. Returns Task<bool> GetAllAsync() Get all top-level ecosystems, i.e., Agriculture, Quantum, Artificial Intelligence. public Task<List<EcosystemOverviewDto>> GetAllAsync() Returns Task<List<EcosystemOverviewDto>> GetByTopicsAsync(EcosystemRequestDto) Get an ecosystem by its topics. public Task<EcosystemDto> GetByTopicsAsync(EcosystemRequestDto dto) Parameters dto EcosystemRequestDto The Dto that contains the request information of the ecosystem to get. Returns Task<EcosystemDto> The ecosystem. GetTechnologyTaxonomy(string) This method returns the technology taxonomy of the given ecosystem. That is, the list of technologies that were used to create the ecosystem, and was saved in the postgres database when the ecosystem was created. public Task<List<Technology>> GetTechnologyTaxonomy(string ecosystemName) Parameters ecosystemName string The name of the ecosystem we want to find technologies for. Returns Task<List<Technology>> A list of technologies for a given ecosystem. RemoveEcosystem(string) Remove an existing top-level ecosystem from the database. public Task<string> RemoveEcosystem(string ecosystem) Parameters ecosystem string Returns Task<string> UpdateDescription(DescriptionRequestDto) Update description for ecosystem with given description public Task<string> UpdateDescription(DescriptionRequestDto dto) Parameters dto DescriptionRequestDto The DescriptionDto containts the new description to be saved to the database. Returns Task<string> Returns a string with the update status. UpdateTopics(EcosystemCreationDto) Update the database with new topics and link the ecosystem to all its topics. public Task<string> UpdateTopics(EcosystemCreationDto dto) Parameters dto EcosystemCreationDto The data transfer object containing all required information. Returns Task<string> Return a status message."
  },
  "api/SECODashBackend.Services.Ecosystems.IEcosystemsService.html": {
    "href": "api/SECODashBackend.Services.Ecosystems.IEcosystemsService.html",
    "title": "Interface IEcosystemsService | SECODash Backend",
    "keywords": "Interface IEcosystemsService Namespace SECODashBackend.Services.Ecosystems Assembly SECODashBackend.dll Interface for the service that is responsible for handling all ecosystem-related requests. public interface IEcosystemsService Methods CreateEcosystem(EcosystemCreationDto) Task<bool> CreateEcosystem(EcosystemCreationDto dto) Parameters dto EcosystemCreationDto Returns Task<bool> GetAllAsync() Returns all top-level ecosystems. Task<List<EcosystemOverviewDto>> GetAllAsync() Returns Task<List<EcosystemOverviewDto>> All top-level ecosystems. GetByTopicsAsync(EcosystemRequestDto) Returns the ecosystem that has the given topics. Task<EcosystemDto> GetByTopicsAsync(EcosystemRequestDto dto) Parameters dto EcosystemRequestDto The Dto that contains the request information of the ecosystem to get. Returns Task<EcosystemDto> The ecosystem defined by the given topics. GetTechnologyTaxonomy(string) This method returns the technology taxonomy of the given ecosystem. That is, the list of technologies that were used to create the ecosystem, and was saved in the postgres database when the ecosystem was created. Task<List<Technology>> GetTechnologyTaxonomy(string ecosystemName) Parameters ecosystemName string The name of the ecosystem we want to find technologies for. Returns Task<List<Technology>> A list of technologies for a given ecosystem. RemoveEcosystem(string) Task<string> RemoveEcosystem(string ecosystem) Parameters ecosystem string Returns Task<string> UpdateDescription(DescriptionRequestDto) Task<string> UpdateDescription(DescriptionRequestDto dto) Parameters dto DescriptionRequestDto Returns Task<string> UpdateTopics(EcosystemCreationDto) Task<string> UpdateTopics(EcosystemCreationDto dto) Parameters dto EcosystemCreationDto Returns Task<string>"
  },
  "api/SECODashBackend.Services.Ecosystems.html": {
    "href": "api/SECODashBackend.Services.Ecosystems.html",
    "title": "Namespace SECODashBackend.Services.Ecosystems | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Services.Ecosystems Classes EcosystemsService This service is responsible for handling all ecosystem-related requests. It uses the EcosystemsContext to interact with the database. It uses the AnalysisService to analyze ecosystems. Interfaces IEcosystemsService Interface for the service that is responsible for handling all ecosystem-related requests."
  },
  "api/SECODashBackend.Services.ElasticSearch.ElasticsearchService.html": {
    "href": "api/SECODashBackend.Services.ElasticSearch.ElasticsearchService.html",
    "title": "Class ElasticsearchService | SECODash Backend",
    "keywords": "Class ElasticsearchService Namespace SECODashBackend.Services.ElasticSearch Assembly SECODashBackend.dll Service that is responsible for handling all Elasticsearch related requests. public class ElasticsearchService : IElasticsearchService Inheritance object ElasticsearchService Implements IElasticsearchService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ElasticsearchService(ElasticsearchClient) Service that is responsible for handling all Elasticsearch related requests. public ElasticsearchService(ElasticsearchClient client) Parameters client ElasticsearchClient Methods AddProjects(IEnumerable<ProjectDto>) Adds the given projects to the Elasticsearch index. public Task AddProjects(IEnumerable<ProjectDto> projectDtos) Parameters projectDtos IEnumerable<ProjectDto> The projects to be added to the index. Returns Task GetProjectCountByDate(DateTime, List<string>) Queries the Elasticsearch index for the number of projects that were created before the given start time, updated since the start time and contain all the given topics. public Task<long> GetProjectCountByDate(DateTime rawStartTime, List<string> topics) Parameters rawStartTime DateTime The start of the date range topics List<string> The topics to search for Returns Task<long> The number of projects that were created before the given start time, updated since the start time and contain the given topics QueryProjects(SearchRequest) Queries the Elasticsearch index for projects that match the given search request. public Task<SearchResponse<ProjectDto>> QueryProjects(SearchRequest searchRequest) Parameters searchRequest SearchRequest The search request. Returns Task<SearchResponse<ProjectDto>> A SearchResponse for the projects that match the search request."
  },
  "api/SECODashBackend.Services.ElasticSearch.IElasticsearchService.html": {
    "href": "api/SECODashBackend.Services.ElasticSearch.IElasticsearchService.html",
    "title": "Interface IElasticsearchService | SECODash Backend",
    "keywords": "Interface IElasticsearchService Namespace SECODashBackend.Services.ElasticSearch Assembly SECODashBackend.dll Interface for the service that is responsible for handling all Elasticsearch related requests. public interface IElasticsearchService Methods AddProjects(IEnumerable<ProjectDto>) Adds the given projects to the Elasticsearch index. Task AddProjects(IEnumerable<ProjectDto> projectDtos) Parameters projectDtos IEnumerable<ProjectDto> The projects to be added to the index. Returns Task GetProjectCountByDate(DateTime, List<string>) Task<long> GetProjectCountByDate(DateTime startTime, List<string> topic) Parameters startTime DateTime topic List<string> Returns Task<long> QueryProjects(SearchRequest) Queries the Elasticsearch index for projects that match the given search request. Task<SearchResponse<ProjectDto>> QueryProjects(SearchRequest searchRequest) Parameters searchRequest SearchRequest The search request. Returns Task<SearchResponse<ProjectDto>> A SearchResponse for the projects that match the search request."
  },
  "api/SECODashBackend.Services.ElasticSearch.html": {
    "href": "api/SECODashBackend.Services.ElasticSearch.html",
    "title": "Namespace SECODashBackend.Services.ElasticSearch | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Services.ElasticSearch Classes ElasticsearchService Service that is responsible for handling all Elasticsearch related requests. Interfaces IElasticsearchService Interface for the service that is responsible for handling all Elasticsearch related requests."
  },
  "api/SECODashBackend.Services.Projects.IProjectsService.html": {
    "href": "api/SECODashBackend.Services.Projects.IProjectsService.html",
    "title": "Interface IProjectsService | SECODash Backend",
    "keywords": "Interface IProjectsService Namespace SECODashBackend.Services.Projects Assembly SECODashBackend.dll Interface for a service that is responsible for requesting the Spider for projects and saving them to the database. public interface IProjectsService Methods MineByKeywordAsync(string, string, int) Requests the Spider for projects related to the given keyword and saves them to the database. Task MineByKeywordAsync(string keyword, string ecosystem, int amount) Parameters keyword string The keyword to to search for. ecosystem string The ecosystem the request is linked to amount int The amount of repos to search for. Returns Task MineByTaxonomyAsync(List<string>, string, int, int) Requests the Spider for projects related to the given taxonomy and saves them to the database. Task MineByTaxonomyAsync(List<string> taxonomy, string ecosystem, int keywordAmount, int topicAmount) Parameters taxonomy List<string> The list of strings to mine off of github ecosystem string The ecosystem the request is linked to keywordAmount int The amount of repos to search for with keyword search topicAmount int The amount of repos to search for with topic search Returns Task MineByTopicAsync(string, string, int) Requests the Spider for projects related to the given topic and saves them to the database. Task MineByTopicAsync(string topic, string ecosystem, int amount) Parameters topic string The topic to to search for. ecosystem string The ecosystem the request is linked to amount int The amount of repos to search for. Returns Task"
  },
  "api/SECODashBackend.Services.Projects.ProjectsService.html": {
    "href": "api/SECODashBackend.Services.Projects.ProjectsService.html",
    "title": "Class ProjectsService | SECODash Backend",
    "keywords": "Class ProjectsService Namespace SECODashBackend.Services.Projects Assembly SECODashBackend.dll This service is responsible for requesting the Spider for projects, requesting the Data Processor for additional topics and saving them to Elasticsearch. public class ProjectsService : IProjectsService Inheritance object ProjectsService Implements IProjectsService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProjectsService(IElasticsearchService, ISpiderService, IDataProcessorService) This service is responsible for requesting the Spider for projects, requesting the Data Processor for additional topics and saving them to Elasticsearch. public ProjectsService(IElasticsearchService elasticsearchService, ISpiderService spiderService, IDataProcessorService dataProcessorService) Parameters elasticsearchService IElasticsearchService spiderService ISpiderService dataProcessorService IDataProcessorService Methods MineByKeywordAsync(string, string, int) Requests the Spider for projects related to the given keyword, requests Data Processor for additional topics and saves them to Elasticsearch. public Task MineByKeywordAsync(string keyword, string ecosystem, int amount) Parameters keyword string The keyword to to search for. ecosystem string The ecosystem the request is linked to amount int The amount of repos to search for. Returns Task MineByTaxonomyAsync(List<string>, string, int, int) Requests the Spider for projects related to the given taxonomy, requests Data Processor for additional topics and saves them to Elasticsearch. public Task MineByTaxonomyAsync(List<string> taxonomy, string ecosystem, int keywordAmount, int topicAmount) Parameters taxonomy List<string> The list of strings to mine off of github ecosystem string The ecosystem the request is linked to keywordAmount int The amount of repos to search for with keyword search topicAmount int The amount of repos to search for with topic search Returns Task MineByTopicAsync(string, string, int) Requests the Spider for projects related to the given topic, requests Data Processor for additional topics and saves them to Elasticsearch. public Task MineByTopicAsync(string topic, string ecosystem, int amount) Parameters topic string The topic to to search for. ecosystem string The ecosystem the request is linked to amount int The amount of repos to search for. Returns Task"
  },
  "api/SECODashBackend.Services.Projects.html": {
    "href": "api/SECODashBackend.Services.Projects.html",
    "title": "Namespace SECODashBackend.Services.Projects | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Services.Projects Classes ProjectsService This service is responsible for requesting the Spider for projects, requesting the Data Processor for additional topics and saving them to Elasticsearch. Interfaces IProjectsService Interface for a service that is responsible for requesting the Spider for projects and saving them to the database."
  },
  "api/SECODashBackend.Services.Scheduler.HangfireAuthorizationFilter.html": {
    "href": "api/SECODashBackend.Services.Scheduler.HangfireAuthorizationFilter.html",
    "title": "Class HangfireAuthorizationFilter | SECODash Backend",
    "keywords": "Class HangfireAuthorizationFilter Namespace SECODashBackend.Services.Scheduler Assembly SECODashBackend.dll Hangfire authorization filter that allows only authenticated users to access the Hangfire dashboard. public class HangfireAuthorizationFilter : IDashboardAuthorizationFilter Inheritance object HangfireAuthorizationFilter Implements IDashboardAuthorizationFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Authorize(DashboardContext) public bool Authorize(DashboardContext context) Parameters context DashboardContext Returns bool"
  },
  "api/SECODashBackend.Services.Scheduler.HangfireScheduler.html": {
    "href": "api/SECODashBackend.Services.Scheduler.HangfireScheduler.html",
    "title": "Class HangfireScheduler | SECODash Backend",
    "keywords": "Class HangfireScheduler Namespace SECODashBackend.Services.Scheduler Assembly SECODashBackend.dll Implementation of IScheduler using Hangfire. public class HangfireScheduler : IScheduler Inheritance object HangfireScheduler Implements IScheduler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HangfireScheduler(ILogger<HangfireScheduler>, IRecurringJobManager, IProjectsService) Implementation of IScheduler using Hangfire. public HangfireScheduler(ILogger<HangfireScheduler> logger, IRecurringJobManager recurringJobManager, IProjectsService projectsService) Parameters logger ILogger<HangfireScheduler> recurringJobManager IRecurringJobManager projectsService IProjectsService Methods AddOrUpdateRecurringKeywordMiningJob(string, string, int, MiningFrequency) Adds or updates a recurring job that mines projects by a keyword. public void AddOrUpdateRecurringKeywordMiningJob(string keyword, string ecosystem, int amount, MiningFrequency miningFrequency) Parameters keyword string The keyword to mine by. ecosystem string The ecosystem the request is linked to amount int The amount of projects to mine. miningFrequency MiningFrequency The frequency of mining. AddOrUpdateRecurringTopicMiningJob(string, string, int, MiningFrequency) Adds or updates a recurring job that mines projects by a topic. public void AddOrUpdateRecurringTopicMiningJob(string topic, string ecosystem, int amount, MiningFrequency miningFrequency) Parameters topic string The topic to mine by ecosystem string The ecosystem the request is linked to amount int The amount of projects to mine. miningFrequency MiningFrequency The frequency of mining. AddRecurringTaxonomyMiningJob(string, List<string>, int, int) Add a recurring job that mines projects by a taxonomy. public void AddRecurringTaxonomyMiningJob(string ecosystemName, List<string> taxonomy, int keywordAmount, int topicAmount) Parameters ecosystemName string The name of the ecosystem. taxonomy List<string> The taxonomy to mine by. keywordAmount int The amount of projects to mine for each term using keyword search. topicAmount int The amount of projects to mine for each term using topic search. RemoveRecurringKeywordMiningJob(string) Removes a recurring job that mines projects by a keyword. public void RemoveRecurringKeywordMiningJob(string keyword) Parameters keyword string The keyword belonging to the job that is to removed. RemoveRecurringTaxonomyMiningJob(string) Removes a recurring job that mines projects by a taxonomy. public void RemoveRecurringTaxonomyMiningJob(string ecosystem) Parameters ecosystem string The name of the ecosystem that the job belongs to. RemoveRecurringTopicMiningJob(string) Removes a recurring job that mines projects by a topic. public void RemoveRecurringTopicMiningJob(string topic) Parameters topic string The topic belonging to the job that is to removed."
  },
  "api/SECODashBackend.Services.Scheduler.IScheduler.html": {
    "href": "api/SECODashBackend.Services.Scheduler.IScheduler.html",
    "title": "Interface IScheduler | SECODash Backend",
    "keywords": "Interface IScheduler Namespace SECODashBackend.Services.Scheduler Assembly SECODashBackend.dll Interface for a scheduler that is responsible for scheduling jobs. public interface IScheduler Methods AddOrUpdateRecurringKeywordMiningJob(string, string, int, MiningFrequency) Adds or updates a recurring job that mines projects by a keyword. void AddOrUpdateRecurringKeywordMiningJob(string keyword, string ecosystem, int amount, MiningFrequency miningFrequency) Parameters keyword string The keyword to mine by. ecosystem string The ecosystem the request is linked to amount int The amount of projects to mine. miningFrequency MiningFrequency The frequency of mining. AddOrUpdateRecurringTopicMiningJob(string, string, int, MiningFrequency) Adds or updates a recurring job that mines projects by a topic. void AddOrUpdateRecurringTopicMiningJob(string topic, string ecosystem, int amount, MiningFrequency miningFrequency) Parameters topic string The topic to mine by ecosystem string The ecosystem the request is linked to amount int The amount of projects to mine. miningFrequency MiningFrequency The frequency of mining. AddRecurringTaxonomyMiningJob(string, List<string>, int, int) Add a recurring job that mines projects by a taxonomy. void AddRecurringTaxonomyMiningJob(string ecosystemName, List<string> taxonomy, int keywordAmount, int topicAmount) Parameters ecosystemName string The name of the ecosystem. taxonomy List<string> The taxonomy to mine by. keywordAmount int The amount of projects to mine for each term using keyword search. topicAmount int The amount of projects to mine for each term using topic search. RemoveRecurringKeywordMiningJob(string) Removes a recurring job that mines projects by a keyword. void RemoveRecurringKeywordMiningJob(string keyword) Parameters keyword string The keyword belonging to the job that is to removed. RemoveRecurringTaxonomyMiningJob(string) Removes a recurring job that mines projects by a taxonomy. void RemoveRecurringTaxonomyMiningJob(string ecosystem) Parameters ecosystem string The ecosystem belonging to the job that is to removed. RemoveRecurringTopicMiningJob(string) Removes a recurring job that mines projects by a topic. void RemoveRecurringTopicMiningJob(string topic) Parameters topic string The topic belonging to the job that is to removed."
  },
  "api/SECODashBackend.Services.Scheduler.MiningFrequency.html": {
    "href": "api/SECODashBackend.Services.Scheduler.MiningFrequency.html",
    "title": "Enum MiningFrequency | SECODash Backend",
    "keywords": "Enum MiningFrequency Namespace SECODashBackend.Services.Scheduler Assembly SECODashBackend.dll Enum that represents the frequency of mining projects. public enum MiningFrequency Fields Daily = 2 Hourly = 1 Minutely = 0 Weekly = 3"
  },
  "api/SECODashBackend.Services.Scheduler.html": {
    "href": "api/SECODashBackend.Services.Scheduler.html",
    "title": "Namespace SECODashBackend.Services.Scheduler | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Services.Scheduler Classes HangfireAuthorizationFilter Hangfire authorization filter that allows only authenticated users to access the Hangfire dashboard. HangfireScheduler Implementation of IScheduler using Hangfire. Interfaces IScheduler Interface for a scheduler that is responsible for scheduling jobs. Enums MiningFrequency Enum that represents the frequency of mining projects."
  },
  "api/SECODashBackend.Services.Spider.ISpiderService.html": {
    "href": "api/SECODashBackend.Services.Spider.ISpiderService.html",
    "title": "Interface ISpiderService | SECODash Backend",
    "keywords": "Interface ISpiderService Namespace SECODashBackend.Services.Spider Assembly SECODashBackend.dll Interface for a service that is responsible for requesting the Spider for projects. public interface ISpiderService Methods GetProjectsByKeywordAsync(string, int) Requests the Spider for projects related to the given keyword. Task<List<ProjectDto>> GetProjectsByKeywordAsync(string keyword, int amount) Parameters keyword string The keyword to search for. amount int The amount of repos to search for. Returns Task<List<ProjectDto>> GetProjectsByTopicAsync(string, int) Requests the Spider for projects related to the given topic. Task<List<ProjectDto>> GetProjectsByTopicAsync(string topic, int amount) Parameters topic string The topic to search for. amount int The amount of repos to search for. Returns Task<List<ProjectDto>>"
  },
  "api/SECODashBackend.Services.Spider.SpiderService.html": {
    "href": "api/SECODashBackend.Services.Spider.SpiderService.html",
    "title": "Class SpiderService | SECODash Backend",
    "keywords": "Class SpiderService Namespace SECODashBackend.Services.Spider Assembly SECODashBackend.dll This service is responsible for requesting the Spider for projects. public class SpiderService : ISpiderService Inheritance object SpiderService Implements ISpiderService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SpiderService(string) public SpiderService(string connectionString) Parameters connectionString string Methods GetProjectsByKeywordAsync(string, int) Requests the Spider for projects related to the given keyword. public Task<List<ProjectDto>> GetProjectsByKeywordAsync(string keyword, int amount) Parameters keyword string The keyword to search for. amount int The amount of repos to search for. Returns Task<List<ProjectDto>> GetProjectsByTopicAsync(string, int) Requests the Spider for projects related to the given topic. public Task<List<ProjectDto>> GetProjectsByTopicAsync(string topic, int amount) Parameters topic string The topic to search for. amount int The amount of repos to search for. Returns Task<List<ProjectDto>>"
  },
  "api/SECODashBackend.Services.Spider.html": {
    "href": "api/SECODashBackend.Services.Spider.html",
    "title": "Namespace SECODashBackend.Services.Spider | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Services.Spider Classes SpiderService This service is responsible for requesting the Spider for projects. Interfaces ISpiderService Interface for a service that is responsible for requesting the Spider for projects."
  },
  "api/SECODashBackend.Services.Users.UsersService.html": {
    "href": "api/SECODashBackend.Services.Users.UsersService.html",
    "title": "Class UsersService | SECODash Backend",
    "keywords": "Class UsersService Namespace SECODashBackend.Services.Users Assembly SECODashBackend.dll This service is responsible for handling all user-related requests. public class UsersService Inheritance object UsersService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UsersService(EcosystemsContext, ILogger<UsersService>) This service is responsible for handling all user-related requests. public UsersService(EcosystemsContext userContext, ILogger<UsersService> _logger) Parameters userContext EcosystemsContext Is used to interact with the database. _logger ILogger<UsersService> Methods AddEditorToEcosystem(string, string, string) Add an Admin to an ecosystem as an editor. public Task<string> AddEditorToEcosystem(string rootAdminId, string userName, string topEcosystem) Parameters rootAdminId string userName string topEcosystem string Returns Task<string> AddUserAsync(string, string) Add a user to the database using a given id and username. All new users start as User. public Task AddUserAsync(string id, string userName) Parameters id string The Id as string generated by the login provider. userName string The UserName as string provided by the user. Returns Task GetAllAsync() Retrieve all users from the database. public Task<List<User>> GetAllAsync() Returns Task<List<User>> List<T> of type User. GetByNameAsync(string) This method returns the User with the provided UserName. public Task<User?> GetByNameAsync(string userName) Parameters userName string The userName of the User to lookup in the database, provided as string. Returns Task<User> Returns the User if it is present in the database. Returns null if not found. LoginRequest(string, string) This method handles the Login requests received. If the User exists, return the UserType. Otherwise create a new User and then return the UserType. public Task<UserPermissionsDto> LoginRequest(string id, string userName) Parameters id string The Id of the User that is trying to log in. userName string The UserName of the User that is trying to log in. Returns Task<UserPermissionsDto> Returns the Type of the User that is logging in. RemoveById(string) This method removes the User with the provided Id from the database. public Task RemoveById(string id) Parameters id string The Id of the User to remove from the database, provided as string. Returns Task UpdateUserType(string, UserType) Change the UserType of the provided UserName to the new UserType. public Task<string> UpdateUserType(string userName, User.UserType newUserType) Parameters userName string newUserType User.UserType Returns Task<string>"
  },
  "api/SECODashBackend.Services.Users.html": {
    "href": "api/SECODashBackend.Services.Users.html",
    "title": "Namespace SECODashBackend.Services.Users | SECODash Backend",
    "keywords": "Namespace SECODashBackend.Services.Users Classes UsersService This service is responsible for handling all user-related requests."
  },
  "back-end/bin/Debug/SECODashBackend.html": {
    "href": "back-end/bin/Debug/SECODashBackend.html",
    "title": "| SECODash Backend",
    "keywords": "SECODashBackend This controller is responsible for handling requests related to ecosystems. This controller is responsible for handling requests related to ecosystems. Returns all top-level ecosystems. Returns an ecosystem defined by the topics in the dto This controller is responsible for handling requests related to projects. This controller is responsible for handling requests related to projects. This method returns a list of projects based on the given topic and amount. This method returns a list of projects based on the given keyword and amount. Initializes the Ecosystems database with the top-level ecoystems. Converts an Ecosystem to a data transfer object. Represents a data transfer object for a Contributor of a Project. Represents a data transfer object for a Top Contributor of an ecosystem. Represents a data transfer object for an Ecosystem. Represents a data transfer object for the supplementary data of a top level Ecosystem such as Agriculture, Quantum or Artificial Intelligence. Represents a data transfer object for an Ecosystem request by the front-end. Represents a data transfer object for a sub-ecosystem. Represents a data transfer object for a programming language used in an ecosystem. Represents a data transfer object for a Project. Represents a data transfer object for a Project requested from the Spider. Data Transfer Object for a readme This class represents a logger that logs to a file. This class represents a logger that logs to a file. This class configures and builds the . This static class handles async logging to a file by storing records in an intermediate collection. Initialise the method on an async thread. Add a record to the collection to be logged later. The log message as . Filepath as for the location of the log file. Start a loop to take a record from the collection and write the message to the accompanying file location. This class stores the options for the as FilePath and FolderPath. Can create an instance of the . This constructor uses the to create a directory for storing log files if this folder does not yet exist. Represents the file location the should write to. This class represents an Ecosystem. An Ecosystem is a collection of projects that are related to each other. This class represents a Topic. A Topic is a keyword that is related to a project and is used to define ecosystems. Service that analyses an ecosystem by querying the Elasticsearch index for projects that contain the given topics. The service is responsible for retrieving the relevant data from the search response and converting it to the correct format. Service that analyses an ecosystem by querying the Elasticsearch index for projects that contain the given topics. The service is responsible for retrieving the relevant data from the search response and converting it to the correct format. Queries the Elasticsearch index for projects that contain the given topics and analyses the ecosystem. The analysis consists of two parts: 1. Retrieving the top x programming languages 2. Retrieving the top x sub-ecosystems/topics Retrieves the top contributors from the search response and converts them into a Top x list. The method first gets the nested aggregation for contributors from the search response. Then, it creates a list of TopContributorDto objects from the buckets of the contributors aggregate. Each TopContributorDto object contains the login and the total number of contributions of a contributor. The method then sorts the list of TopContributorDto objects in descending order of contributions. Finally, it returns the top x contributors from the sorted list. The search response from Elasticsearch. The number of top contributors to retrieve. A list of the top x contributors. Retrieves the programming languages from the search response and converts them into a Top x list Retrieves the sub-ecosystems/topics from the search response and converts them into a Top x list Converts a list of all the programming languages in an ecosystem with the sum of their usage percentages over all projects to a \"Top x\" list of x length in descending order of percentage with the percentages normalised. Sorts a list of sub-ecosystems in descending order of the number of projects and returns the sorted list. Filters out sub-ecosystems that are in the topics list that defines the ecosystem, have fewer than the minimum number of projects or are programming languages. Interface for services that analyse an ecosystem. This service is responsible for sending the readme data to the data processor and returning the resulting topics. Interface for the service is responsible for sending the readme data to the data processor and returning the resulting topics. This service is responsible for handling all ecosystem-related requests. It uses the EcosystemsContext to interact with the database. It uses the AnalysisService to analyze ecosystems. This service is responsible for handling all ecosystem-related requests. It uses the EcosystemsContext to interact with the database. It uses the AnalysisService to analyze ecosystems. Get all top-level ecosystems, i.e., Agriculture, Quantum, Artificial Intelligence. Get an ecosystem by its name. Get an ecosystem by its topics. Interface for the service that is responsible for handling all ecosystem-related requests. Service that is responsible for handling all Elasticsearch related requests. Service that is responsible for handling all Elasticsearch related requests. Adds the given projects to the Elasticsearch index. Queries the Elasticsearch index for projects that match the given search request. Interface for the service that is responsible for handling all Elasticsearch related requests. Interface for a service that is responsible for requesting the Spider for projects and saving them to Elasticsearch. This service is responsible for requesting the Spider for projects and saving them to Elasticsearch. This service is responsible for requesting the Spider for projects and saving them to Elasticsearch. Requests the Spider for projects related to the given topic and saves them to Elasticsearch. Requests the Spider for projects related to the given keyword and saves them to Elasticsearch. Interface for a service that is responsible for requesting the Spider for projects. This service is responsible for requesting the Spider for projects. Requests the Spider for projects related to the given keyword. Requests the Spider for projects related to the given topic. Requests the Spider to update the given projects. Requests the Spider for the contributors of the given project."
  },
  "getting-started.html": {
    "href": "getting-started.html",
    "title": "Getting Started | SECODash Backend",
    "keywords": "Getting Started"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | SECODash Backend",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "introduction.html": {
    "href": "introduction.html",
    "title": "Introduction | SECODash Backend",
    "keywords": "Introduction"
  }
}