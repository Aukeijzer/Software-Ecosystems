// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SECODashBackend.Database;

#nullable disable

namespace SECODashBackend.Migrations
{
    [DbContext(typeof(EcosystemsContext))]
    partial class EcosystemsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("EcosystemProject", b =>
                {
                    b.Property<string>("EcosystemsId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectsId")
                        .HasColumnType("text");

                    b.HasKey("EcosystemsId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("EcosystemProject");
                });

            modelBuilder.Entity("SECODashBackend.Models.Ecosystem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfStars")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ecosystems");
                });

            modelBuilder.Entity("SECODashBackend.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NumberOfStars")
                        .HasColumnType("integer");

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<string>("ReadMe")
                        .HasColumnType("text");

                    b.Property<List<string>>("Topics")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int?>("TotalSize")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SECODashBackend.Models.ProjectProgrammingLanguage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProgrammingLanguage");
                });

            modelBuilder.Entity("EcosystemProject", b =>
                {
                    b.HasOne("SECODashBackend.Models.Ecosystem", null)
                        .WithMany()
                        .HasForeignKey("EcosystemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SECODashBackend.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SECODashBackend.Models.ProjectProgrammingLanguage", b =>
                {
                    b.HasOne("SECODashBackend.Models.Project", null)
                        .WithMany("Languages")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("SECODashBackend.Models.Project", b =>
                {
                    b.Navigation("Languages");
                });
#pragma warning restore 612, 618
        }
    }
}
